.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
driverlist = c("canj1",  "farj7",  "gres0",  "hunt",   "kell0", "lewr10", "rice30", "smiv")
shif = shif[driver %in% driverlist,]
event_tab = event_tab[driver %in% driverlist,]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,precip_intensity:precip_intensity]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,precip_intensity:precip_intensity])
)
library(rstan)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250)#, init_r = .5
shif[,unique(driver)]
driverlist = c("canj1",  "farj7",  "gres0",  "hunt",   "kell0", "lewr10", "rice30", "smiv")
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
driverlist = c("canj1",  "farj7",  "gres0",  "hunt",   "kell0", "lewr10", "rice30", "smiv")
shif = shif[driver %in% driverlist,]
event_tab = event_tab[driver %in% driverlist,]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,precip_intensity:precip_intensity]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,precip_intensity:precip_intensity])
)
library(rstan)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250)#, init_r = .5
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
driverlist = c("canj1",  "farj7",  "gres0",  "hunt",   "kell0", "lewr10")
shif = shif[driver %in% driverlist,]
event_tab = event_tab[driver %in% driverlist,]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,precip_intensity:precip_intensity]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,precip_intensity:precip_intensity])
)
library(rstan)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250)#, init_r = .5
shif[,unique(driver)]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
driverlist = c("canj1",  "farj7",  "gres0",  "hunt",   "kell0", "rice30", "smiv")
shif = shif[driver %in% driverlist,]
event_tab = event_tab[driver %in% driverlist,]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,precip_intensity:precip_intensity]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,precip_intensity:precip_intensity])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250)#, init_r = .5
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
driverlist = c("canj1",  "farj7",  "gres0",  "hunt",   "kell0", "rice30", "smiv", "sunc", "woow59")
shif = shif[driver %in% driverlist,]
event_tab = event_tab[driver %in% driverlist,]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,precip_intensity:precip_intensity]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,precip_intensity:precip_intensity])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250)#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250, chains= 3)#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250, chain= 3)#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250, nchain= 3)#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat, refresh = 250, nchains= 3)#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 3, iter = 2000, data = standat, refresh = 250)#, init_r = .5
traceplot(fit)
traceplot(fit, "beta")
standat
shif
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 1000, data = standat, refresh = 250)#, init_r = .5
fit
p
shif[,unique(driver)]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
shif[driver == "lewe10"]
shif[driver == "lewe10",]
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
shift[,.N,driver]
shif[,.N,driver]
shif[driver == "lewr10",]
View(shif[driver == "lewr10",])
shif[driver == "lewr10",SCE_time]
event_tab
shif
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
shif = shif[!(driver %in% "lewr10" & shift_ID == 10),]
event_tab = event_tab[!(driver %in% "lewr10" & shift_ID == 10),]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 1000, data = standat, refresh = 250)#, init_r = .5
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))/60] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
event_tab
tau = shif[,shift_length/60];
event_time = event_tab[,time2event/60]
tau
event_time
event_tab
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
tau = shif[,shift_length/60]
event_time = event_tab[,time2event/60]
tau
event_time
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
shif = shif[!(driver %in% "lewr10" & shift_ID == 10),]
event_tab = event_tab[!(driver %in% "lewr10" & shift_ID == 10),]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 1000, data = standat, refresh = 250)#, init_r = .5
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 1000, data = standat, refresh = 250)#, init_r = .5
shif[,n_SCE]
cumsum(shif[,n_SCE])
event_time
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
event_tab
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,time2event := ifelse(time2event == 0, 0.01, time2event)] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 1000, data = standat, refresh = 250)#, init_r = .5
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,time2event := ifelse(time2event == 0, 0.01, time2event)] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 4, iter = 2000, data = standat, refresh = 250)#, init_r = .5
traceplot(fit, "beta")
pacman::p_load(dplyr, ggplot2, rstan, data.table, lubridate)
shif = data.table::fread("data/32-analyses_shifts.csv")
eve = data.table::fread("data/33-analyses_eve.csv")
event_tab = eve %>%
.[event_type %in% c("HB", "HW", "CM", "RS"),
.(driver, shift_ID, start_time, event_time, shift_length)] %>%
.[,`:=`(start_time = ymd_hms(start_time), event_time = ymd_hms(event_time))] %>%
.[,time2event := as.integer(difftime(event_time, start_time, units = "mins"))] %>%
.[,time2event := ifelse(time2event == 0, 0.01, time2event)] %>%
.[,shift_id := as.integer(as.factor(paste0(driver, shift_ID)))]
shif[,unique(driver)]
standat = list(
N = shif[,sum(n_SCE)],
K = ncol(shif[,age:num_lanes]),
S = shif[,.N],
D = shif[,length(unique(driver))],
id = shif[,as.integer(as.factor(driver))],
tau = shif[,shift_length/60],
event_time = event_tab[,time2event/60],
group_size = shif[,n_SCE],
X_predictors = as.matrix(shif[,age:num_lanes])
)
fit = stan("stan/nhppnoevent_log.stan",
chains = 4, iter = 2000, data = standat,
control = list(adapt_delta = 0.99))#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat,
control = list(adapt_delta = 0.99),
max_treedepth = 15)#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 1, iter = 2000, data = standat,
control = list(adapt_delta = 0.99,
max_treedepth = 15))#, init_r = .5
fit = stan("stan/nhppnoevent_log.stan",
chains = 4, iter = 2000, data = standat,
control = list(adapt_delta = 0.99,
max_treedepth = 15))#, init_r = .5
traceplot(fit, "beta")
fit = stan("stan/nhppnoevent_log.stan",
chains = 3, iter = 2000, data = standat,
control = list(adapt_delta = 0.99,
max_treedepth = 15), seed = 123)#, init_r = .5
traceplot(fit, "beta")
saveRDS(fit, "fit/nhpp_fit.rds")
# p_load is equivalent to combining both install.packages() and library()
p_load(dataPreparation, DataExplorer, DT, tidyverse, data.table)
library(pacman) # needs to be installed first
# p_load is equivalent to combining both install.packages() and library()
p_load(dataPreparation, DataExplorer, DT, tidyverse, data.table)
source("functions/functions.R") # to load data.types()
df <- read.csv("data/dcg_fetears_all.csv")
cat(paste("We have read the Full Dataset into a data.frame (df) titled df.", "The df consists of", nrow(df),"and",
paste0(ncol(df),"."),"Additionally, R initially divides the columns of different types. We summarize these in the table below."))
# First tab, where we summarize the column types
cat(paste("###","Column Types","{-}","\n"))
types <- data.types(df) # see functions.R file
types
cat("\n") # Printing a line break
## Second Tab (Missing Data)
cat(paste("###","Missing Data","{-}","\n"))
cat("In the plot below, we sample 40 columns at random from the dataset to show the actual percentage of the data that is missing for each variable. The colors are used to denote the data quality for that column using a traffic light scheme (where green is good and red is bad).")
df.na.plot <- df[,sample(colnames(df),40)] %>% plot_missing()
## Third Tab (Clean Data)
cat(paste("###","Clean Data","{-}","\n"))
cat("Using the fastFilterVariables() from the dataPreparation R package, we can remove: (a) constant columns: they take the same value for every line; (b) double columns: they have an exact copy in the data set; and (c)bijection columns: there is another column containing the exact same information (but maybe coded differently) for example col1: Men/Women, col2 M/W. The results from this analysis is saved into a data frame titled: df.cleaned.")
df.cleaned <- fastFilterVariables(df)
cat(paste0("The data frame df.cleaned consists of ", ncol(df.cleaned), " columns. Note that the original data frame df had ", ncol(df), " columns."))
saveRDS(df.cleaned, "../Results/sec_cleaned.RDS")
saveRDS(df.cleaned, "results/sec_cleaned.RDS")
# df.cleaned <- readRDS("../Results/sec_cleaned.RDS") %>%
#   subset(ID %in% "A110JYKWR9T6H8.txt",
#          select = c(ID, speed_touch_mean, speed_touch_min,
#                     speed_move_max,
#                     speed_move_min, speed_move_std,
#                     distance_click_object_center_max,
#                     distance_click_object_center_min,
#                     distance_drop_target_center_max,
#                     distance_drop_target_center_min,
#                     distance_drop_target_center_mean,
#                     distance_drop_target_center_std,
#                     pause_and_drag_max, pause_and_drag_min,
#                     pause_and_drag_mean, pause_and_drag_std,
#                     pause_and_drop_max, pause_and_drop_min,
#                     pause_and_drop_mean, pause_and_drop_std,
#                     angles_mean, angles_max))
df.cleaned <- readRDS("results/sec_cleaned.RDS") %>%
subset(select = c(ID, speed_touch_mean,
pause_and_drop_mean))
df.cleaned.num <- select_if(df.cleaned, is.numeric)
mvn(df.cleaned, subset="ID", mvnTest = "hz", univariatePlot = "qqplot", multivariatePlot = "contour")$multivariateNormality
??mvn
# p_load is equivalent to combining both install.packages() and library()
p_load(dataPreparation, DataExplorer, DT, tidyverse, MVN)
df.cleaned <- readRDS("results/sec_cleaned.RDS") %>%
subset(select = c(ID, speed_touch_mean,
pause_and_drop_mean))
df.cleaned.num <- select_if(df.cleaned, is.numeric)
mvn(df.cleaned, subset="ID", mvnTest = "hz", univariatePlot = "qqplot",
multivariatePlot = "contour")$multivariateNormality
df.cleaned
df.cleaned <- readRDS("results/sec_cleaned.RDS") %>%
subset(select = c(ID, speed_touch_mean,
pause_and_drop_mean))
df.cleaned.num <- select_if(df.cleaned, is.numeric) %>%
filter(ID == "A110JYKWR9T6H8.txt")
mvn(df.cleaned, subset="ID", mvnTest = "hz", univariatePlot = "qqplot",
multivariatePlot = "contour")$multivariateNormality
df.cleaned.num
df.cleaned.num <- select_if(df.cleaned, is.numeric)
mvn(df.cleaned, subset="ID", mvnTest = "hz", univariatePlot = "qqplot",
multivariatePlot = "contour")$multivariateNormality
df.cleaned <- readRDS("results/sec_cleaned.RDS") %>%
subset(select = c(ID, speed_touch_mean,
pause_and_drop_mean))
df.cleaned.num <- select_if(df.cleaned, is.numeric)
mvn(df.cleaned.num, mvnTest = "hz", univariatePlot = "qqplot",
multivariatePlot = "contour")$multivariateNormality
df.cleaned <- readRDS("results/sec_cleaned.RDS") %>%
subset(select = c(ID, speed_touch_mean,
pause_and_drop_mean))
df.cleaned.num <- select_if(df.cleaned, is.numeric) %>%
slice(1:5000)
mvn(df.cleaned.num, mvnTest = "hz", univariatePlot = "qqplot",
multivariatePlot = "contour")$multivariateNormality
